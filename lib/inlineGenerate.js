"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = generateInline;

var _minifySvgBrowser = _interopRequireDefault(require("./helpers/minifySvgBrowser"));

var _iconTsx = _interopRequireDefault(require("../template/icon-tsx.nunjucks"));

var _cleanup = require("./helpers/cleanup");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultComment = 'Generated by gulp svg-icon - do not modify manually';

function readFile(file) {
  const name = file.name;
  return new Promise(resolve => {
    const reader = new FileReader();

    reader.onload = e => resolve({
      name,
      content: e.target.result
    });

    reader.readAsText(file);
  });
}

async function generateInline(config, svgFiles) {
  const comment = config.comment || defaultComment;
  const reactPureRender = config.reactPureRender;
  const fileReaders = svgFiles.map(file => readFile(file));
  const svgs = await Promise.all(fileReaders);
  const svgPromises = svgs.map(file => (0, _minifySvgBrowser.default)(file.name, file.content));
  return Promise.all(svgPromises).then(results => {
    const icons = results.map(result => {
      return {
        filename: result.filename,
        name: (0, _cleanup.cleanupName)(result.name),
        svg: (0, _cleanup.cleanupSvg)(result.svg.data)
      };
    }).sort((a, b) => a.name.localeCompare(b.name));
    return {
      icons,
      source: _iconTsx.default.render({
        icons,
        comment,
        reactPureRender
      })
    };
  });
}

module.exports = exports.default;